#!/usr/bin/env python3
"""
Configuration module.
Loads environment variables from .env file and provides defaults.
"""
import os
import sys
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Helper function to get required environment variables
def get_required_env(key, error_msg=None):
    """Get a required environment variable or raise an error."""
    value = os.environ.get(key)
    if value is None:
        msg = error_msg or f"ERROR: Required environment variable '{key}' is not set in .env file"
        print(msg, file=sys.stderr)
        raise ValueError(msg)
    return value

# Helper function to get optional environment variables
def get_optional_env(key, default):
    """Get an optional environment variable with a default value."""
    return os.environ.get(key, default)

# ----------------------------------------------------------------------
# Google Cloud Configuration
# ----------------------------------------------------------------------
try:
    # These are required for the app to function
    PROJECT_ID = get_required_env("PROJECT_ID", "Google Cloud Project ID must be set in .env file")
    STORAGE_URI = get_required_env("STORAGE_URI", "Google Cloud Storage URI must be set in .env file")
    VEO_MODEL_ID = get_optional_env("VEO_MODEL_ID", "veo2")
    DB_ID = get_required_env("DB_ID", "Firestore Database ID must be set in .env file")
    GEMINI_API_KEY = get_required_env("GEMINI_API_KEY", "Gemini API Key` must be set in .env file")
except ValueError as e:
    # Re-raise as SystemExit to prevent the app from starting with missing config
    print(f"Configuration error: {str(e)}", file=sys.stderr)
    raise SystemExit(1)

# ----------------------------------------------------------------------
# Gemini Configuration
# ----------------------------------------------------------------------
try:
    # Gemini requires its own project ID and location
    GEMINI_PROJECT_ID = get_required_env("GEMINI_PROJECT_ID", "Gemini Project ID must be set in .env file")
    GEMINI_LOCATION = get_optional_env("GEMINI_LOCATION", "us-central1")
    GEMINI_MODEL_NAME = get_optional_env("GEMINI_MODEL_NAME", "gemini-1.5-pro")
except ValueError as e:
    print(f"Gemini configuration error: {str(e)}", file=sys.stderr)
    raise SystemExit(1)

# ----------------------------------------------------------------------
# History Tracking
# ----------------------------------------------------------------------
HISTORY_ENABLED = get_optional_env("HISTORY_ENABLED", "true").lower() == "true"
HISTORY_FOLDER = get_optional_env("HISTORY_FOLDER", "veo2_history")
HISTORY_FILE = get_optional_env("HISTORY_FILE", "history.csv")

# ----------------------------------------------------------------------
# Default Prompts
# ----------------------------------------------------------------------
DEFAULT_TEXT_PROMPT = get_optional_env("DEFAULT_TEXT_PROMPT", 
    "A fast-tracking shot through a bustling dystopian sprawl with bright neon signs, flying cars and mist, night, lens flare, volumetric lighting"
)

DEFAULT_IMAGE_PROMPT = get_optional_env("DEFAULT_IMAGE_PROMPT", 
    "Transform this image into a cinematic scene with motion and lighting effects"
)

DEFAULT_NEGATIVE_PROMPT = get_optional_env("DEFAULT_NEGATIVE_PROMPT", 
    "blurry, low quality, distorted faces, bad lighting"
)

# Default style to append to prompts generated by Gemini
DEFAULT_STYLE_PROMPT = get_optional_env("DEFAULT_STYLE_PROMPT", 
    "cinematic quality, detailed, photorealistic, vivid colors, dramatic lighting"
)
APPEND_DEFAULT_STYLE_TO_GEMINI_PROMPTS = get_optional_env("APPEND_DEFAULT_STYLE", "true").lower() == "true"

# Instructions for Gemini when generating prompts from images
DEFAULT_GEMINI_INSTRUCTIONS = get_optional_env("DEFAULT_GEMINI_INSTRUCTIONS", """
You are an AI assistant specializing in creating descriptive prompts for text-to-video generation systems.

Look at this image and create a detailed prompt that could be used to generate a video based on it.

Your prompt should:
1. Describe the scene, subjects, and visual elements in detail
2. Include atmosphere, lighting, and mood
3. Suggest camera movements that would work well (tracking, panning, zoom, etc.)
4. Add cinematic qualities and style references if appropriate
5. Be between 30-100 words for optimal results

Do NOT include phrases like "the image shows" or "based on the image" - just provide the prompt directly.
Do NOT include numbered lists, bullet points, or any formatting in your response.
""".strip())

# ----------------------------------------------------------------------
# Video Generation Settings
# ----------------------------------------------------------------------
DEFAULT_SAMPLE_COUNT = int(get_optional_env("DEFAULT_SAMPLE_COUNT", "1"))
DEFAULT_DURATION_SECONDS = int(get_optional_env("DEFAULT_DURATION_SECONDS", "8"))
DEFAULT_ASPECT_RATIO = get_optional_env("DEFAULT_ASPECT_RATIO", "16:9")
DEFAULT_PERSON_GENERATION = get_optional_env("DEFAULT_PERSON_GENERATION", "allow_adult")

# ----------------------------------------------------------------------
# API Settings
# ----------------------------------------------------------------------
DEFAULT_POLL_INTERVAL = int(get_optional_env("DEFAULT_POLL_INTERVAL", "10"))
DEFAULT_MAX_POLL_ATTEMPTS = int(get_optional_env("DEFAULT_MAX_POLL_ATTEMPTS", "30"))
DEFAULT_URL_EXPIRATION = int(get_optional_env("DEFAULT_URL_EXPIRATION", "3600"))  # 1 hour

# ----------------------------------------------------------------------
# UI Settings
# ----------------------------------------------------------------------
SHOW_FULL_RESPONSE_DEFAULT = get_optional_env("SHOW_FULL_RESPONSE", "false").lower() == "true"
ENABLE_STREAMING_DEFAULT = get_optional_env("ENABLE_STREAMING", "true").lower() == "true"
AUTO_OPEN_BROWSER_DEFAULT = get_optional_env("AUTO_OPEN_BROWSER", "false").lower() == "true"
DEBUG_MODE = get_optional_env("DEBUG_MODE", "false").lower() == "true"

# ----------------------------------------------------------------------
# App Settings
# ----------------------------------------------------------------------
DEFAULT_WAIT_FOR_COMPLETION = get_optional_env("DEFAULT_WAIT_FOR_COMPLETION", "true").lower() == "true"
DEFAULT_SHOW_FULL_RESPONSE = SHOW_FULL_RESPONSE_DEFAULT
DEFAULT_ENABLE_STREAMING = ENABLE_STREAMING_DEFAULT

# Backwards compatibility for renamed variables
HISTORY_FILENAME = HISTORY_FILE 